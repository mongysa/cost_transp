//---------------------------------------------------------------------------

#pragma hdrstop

#include "Unit1.h"
#include <fstream>
//---------------------------------------------------------------------------
#pragma package(smart_init)
void CalcCost(calculations* calc, vec& Vmass, Matr& calc_mass) {

	int count_vt = 1;
	int i = calc->v_min;

	do {
		i += calc->step;
		count_vt++;
	} while (i < calc->v_max);

	try {
		Vmass.Length = count_vt;
	}
	catch (...) {
		calc_mass.Length = 0;
		Vmass.Length = 0;
		return;
	}

	try {
		calc_mass.Length = count_vt;
		for (int i = 0; i < Vmass.Length; i++)
			calc_mass[i].Length = calc->coeff_b.Length;
	}
	catch (...) {
		return;
	}
	double V = calc->v_min;
	i = 0;

	while (Vmass.Length != i) {
		if (V > calc->v_max) {
			Vmass[i] = calc->v_max;
			break;
		}
		Vmass[i] = V;
		V += calc->step;
		i++;
	}

	for (i = 0; i < Vmass.Length; i++) {
		for (int j = 0; j < calc->coeff_b.Length; j++) {
			double TranspTime = calc->time + calc->summ_l / (Vmass[i] * calc->coeff_b[j]);
			calc_mass[i][j] = calc->cost_per_km * Vmass[i] /
				(calc->q * calc->coeff_y * calc->coeff_b[j])
				+ calc->fixed_price * TranspTime / (calc->q * calc->coeff_y)
				+ (calc->rub_k_ton + calc->rub_k_t_km * calc->summ_l) * 1.27;
		}
	}
}

cases LoadFrFile(String File, calculations* Date) {
	if (File.Trim().IsEmpty())
		return false_func_st;
	fstream file;
	file.open(AnsiString(File).c_str(), std::ios_base::in | std::ios_base::binary);
	if (!file.is_open())
		return open_error;
	int L;
	file.read((char*)&L, sizeof(int));

	file.seekg(0, std::ios::end);
	int pos = file.tellg();
	int NumbersByte = (int)pos - sizeof(int);
	int ArrayByte = 11 * sizeof(elem_type) + L * sizeof(elem_type);
	if (NumbersByte != ArrayByte) {
		file.close();
		return false_data;
	}
	try {
		(Date->coeff_b).Length = L;
	}
	catch (...) {
		file.close();
		return alloc_error;
	}
	file.clear();
	file.seekg(sizeof(int));
	file.read((char*)&(Date->cost_per_km), sizeof(elem_type));
	file.read((char*)&(Date->fixed_price), sizeof(elem_type));
	file.read((char*)&(Date->q), sizeof(elem_type));
	file.read((char*)&(Date->coeff_y), sizeof(elem_type));
	file.read((char*)&(Date->summ_l), sizeof(elem_type));
	file.read((char*)&(Date->time), sizeof(elem_type));
	file.read((char*)&(Date->v_min), sizeof(elem_type));
	file.read((char*)&(Date->v_max), sizeof(elem_type));
	file.read((char*)&(Date->step), sizeof(elem_type));
	file.read((char*)&(Date->rub_k_ton), sizeof(elem_type));
	file.read((char*)&(Date->rub_k_t_km), sizeof(elem_type));
	if (L)
		file.read((char*)&(Date->coeff_b[0]), L * sizeof(elem_type));

	file.close();
	return good;
}

cases SaveToFile(String File, calculations* Date) {
	if (File.IsEmpty())
		return false_func_st;
	fstream file;
	file.open(AnsiString(File).c_str(), std::ios_base::out | std::ios_base::binary);
	if (!file.is_open())
		return open_error;

	int L = (Date->coeff_b).Length;
	file.write((char*)&L, sizeof(int));

	file.write((char*)&(Date->cost_per_km), sizeof(elem_type));
	file.write((char*)&(Date->fixed_price), sizeof(elem_type));
	file.write((char*)&(Date->q), sizeof(elem_type));
	file.write((char*)&(Date->coeff_y), sizeof(elem_type));
	file.write((char*)&(Date->summ_l), sizeof(elem_type));
	file.write((char*)&(Date->time), sizeof(elem_type));
	file.write((char*)&(Date->v_min), sizeof(elem_type));
	file.write((char*)&(Date->v_max), sizeof(elem_type));
	file.write((char*)&(Date->step), sizeof(elem_type));
	file.write((char*)&(Date->rub_k_ton), sizeof(elem_type));
	file.write((char*)&(Date->rub_k_t_km), sizeof(elem_type));
	if (L)
		file.write((char*)&((Date->coeff_b)[0]), L * sizeof(elem_type));
	file.close();
	return good;
}
