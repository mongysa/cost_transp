//---------------------------------------------------------------------------

#pragma hdrstop

#include "Unit1.h"
#include <fstream>
//---------------------------------------------------------------------------
#pragma package(smart_init)
void calc_cost(calculations* calc, vec& v_mass, matr& CalcMass) {

	int countVt = 1;
	int i = calc->Vmin;

	do {
		i += calc->step;
		countVt++;
	} while (i < calc->Vmax);

	try {
		v_mass.Length = countVt;
	}
	catch (...) {
		calc_mass.Length = 0;
		v_mass.Length = 0;
		return;
	}

	try {
		CalcMass.Length = countVt;
		for (int i = 0; i < v_mass.Length; i++)
			CalcMass[i].Length = calc->CoefB.Length;
	}
	catch (...) {
		return;
	}
	double V = calc->Vmin;
	i = 0;

	while (v_mass.Length != i) {
		if (V > calc->Vmax) {
			v_mass[i] = calc->Vmax;
			break;
		}
		v_mass[i] = V;
		V += calc->step;
		i++;
	}

	for (i = 0; i < v_mass.Length; i++) {
		for (int j = 0; j < calc->CoefB.Length; j++) {
			double TranspTime = calc->time + calc->averageL / (v_mass[i] * calc->CoefB[j]);
			CalcMass[i][j] = calc->varCost * v_mass[i] /
				(calc->Q * calc->CoefY * calc->CoefB[j])
				+ calc->fixCost * TranspTime / (calc->Q * calc->CoefY)
				+ (calc->FreightRate + calc->TranspRateKm * calc->averageL) * 1.27;
		}
	}
}

cases load_file (String file, calculations* data) {
	if (file.Trim().IsEmpty())
		return IncorrFuncParams_st;
	fstream file;
	file.open(AnsiString(file).c_str(), std::ios_base::in | std::ios_base::binary);
	if (!file.is_open())
		return NotOpen_st;
	int L;
	file.read((char*)&L, sizeof(int));

	file.seekg(0, std::ios::end);
	int pos = file.tellg();
	int NumbersByte = (int)pos - sizeof(int);
	int ArrayByte = 11 * sizeof(tElem) + L * sizeof(tElem);
	if (NumbersByte != ArrayByte) {
		file.close();
		return IncorrData_st;
	}
	try {
		(data->CoefB).Length = L;
	}
	catch (...) {
		file.close();
		return ErrorAllocationDM_st;
	}
	file.clear();
	file.seekg(sizeof(int));
	file.read((char*)&(data->varCost), sizeof(tElem));
	file.read((char*)&(data->fixCost), sizeof(tElem));
	file.read((char*)&(data->Q), sizeof(tElem));
	file.read((char*)&(data->CoefY), sizeof(tElem));
	file.read((char*)&(data->averageL), sizeof(tElem));
	file.read((char*)&(data->time), sizeof(tElem));
	file.read((char*)&(data->Vmin), sizeof(tElem));
	file.read((char*)&(data->Vmax), sizeof(tElem));
	file.read((char*)&(data->step), sizeof(tElem));
	file.read((char*)&(data->FreightRate), sizeof(tElem));
	file.read((char*)&(data->TranspRateKm), sizeof(tElem));
	if (L)
		file.read((char*)&(data->CoefB[0]), L * sizeof(tElem));

	file.close();
	return Correct_st;
}

cases save_to_file(String file, calculations* data) {
	if (file.IsEmpty())
		return IncorrFuncParams_st;
	fstream file;
	file.open(AnsiString(file).c_str(), std::ios_base::out | std::ios_base::binary);
	if (!file.is_open())
		return NotOpen_st;

	int L = (data->CoefB).Length;
	file.write((char*)&L, sizeof(int));

	file.write((char*)&(data->varCost), sizeof(tElem));
	file.write((char*)&(data->fixCost), sizeof(tElem));
	file.write((char*)&(data->Q), sizeof(tElem));
	file.write((char*)&(data->CoefY), sizeof(tElem));
	file.write((char*)&(data->averageL), sizeof(tElem));
	file.write((char*)&(data->time), sizeof(tElem));
	file.write((char*)&(data->Vmin), sizeof(tElem));
	file.write((char*)&(data->Vmax), sizeof(tElem));
	file.write((char*)&(data->step), sizeof(tElem));
	file.write((char*)&(data->FreightRate), sizeof(tElem));
	file.write((char*)&(data->TranspRateKm), sizeof(tElem));
	if (L)
		file.write((char*)&((data->CoefB)[0]), L * sizeof(tElem));
	file.close();
	return Correct_st;
}